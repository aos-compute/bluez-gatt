diff --git a/btgatt-server.c b/btgatt-server.c
index 89812bd..63729d8 100644
--- a/btgatt-server.c
+++ b/btgatt-server.c
@@ -45,6 +45,7 @@
 
 #define UUID_GAP			0x1800
 #define UUID_GATT			0x1801
+#define UUID_WIFI			0x1805
 #define UUID_HEART_RATE			0x180d
 #define UUID_HEART_RATE_MSRMT		0x2a37
 #define UUID_HEART_RATE_BODY		0x2a38
@@ -71,8 +72,10 @@
 #define COLOR_BOLDGRAY	"\x1B[1;30m"
 #define COLOR_BOLDWHITE	"\x1B[1;37m"
 
-static const char test_device_name[] = "Very Long Test Device Name For Testing "
+static const char test_device_name[] = "KYRYLO "
 				"ATT Protocol Operations On GATT Server";
+
+static const char test_wifi_name[] = "WIFI_PYSCH";
 static bool verbose = false;
 
 struct server {
@@ -83,6 +86,9 @@ struct server {
 
 	uint8_t *device_name;
 	size_t name_len;
+	
+	uint8_t *wifi_name;
+	size_t wifi_len;
 
 	uint16_t gatt_svc_chngd_handle;
 	bool svc_chngd_enabled;
@@ -150,6 +156,32 @@ done:
 	gatt_db_attribute_read_result(attrib, id, error, value, len);
 }
 
+static void gap_device_wifi_read_cb(struct gatt_db_attribute *attrib,
+					unsigned int id, uint16_t offset,
+					uint8_t opcode, struct bt_att *att,
+					void *user_data)
+{
+	struct server *server = user_data;
+	uint8_t error = 0;
+	size_t len = 0;
+	const uint8_t *value = NULL;
+
+	PRLOG("GAP WiFi Name Read called\n");
+
+	len = server->wifi_len;
+
+	if (offset > len) {
+		error = BT_ATT_ERROR_INVALID_OFFSET;
+		goto done;
+	}
+
+	len -= offset;
+	value = len ? &server->wifi_name[offset] : NULL;
+
+done:
+	gatt_db_attribute_read_result(attrib, id, error, value, len);
+}
+
 static void gap_device_name_write_cb(struct gatt_db_attribute *attrib,
 					unsigned int id, uint16_t offset,
 					const uint8_t *value, size_t len,
@@ -195,6 +227,52 @@ done:
 	gatt_db_attribute_write_result(attrib, id, error);
 }
 
+static void gap_device_wifi_write_cb(struct gatt_db_attribute *attrib,
+					unsigned int id, uint16_t offset,
+					const uint8_t *value, size_t len,
+					uint8_t opcode, struct bt_att *att,
+					void *user_data)
+{
+	struct server *server = user_data;
+	uint8_t error = 0;
+
+	PRLOG("GAP WiFi Name Write called\n");
+
+	/* If the value is being completely truncated, clean up and return */
+	if (!(offset + len)) {
+		free(server->wifi_name);
+		server->wifi_name = NULL;
+		server->wifi_len = 0;
+		goto done;
+	}
+
+	/* Implement this as a variable length attribute value. */
+	if (offset > server->wifi_len) {
+		error = BT_ATT_ERROR_INVALID_OFFSET;
+		goto done;
+	}
+
+	if (offset + len != server->wifi_len) {
+		uint8_t *name;
+
+		name = realloc(server->wifi_name, offset + len);
+		if (!name) {
+			error = BT_ATT_ERROR_INSUFFICIENT_RESOURCES;
+			goto done;
+		}
+
+		server->wifi_name = name;
+		server->wifi_len = offset + len;
+	}
+
+	if (value)
+		memcpy(server->wifi_name + offset, value, len);
+
+done:
+	gatt_db_attribute_write_result(attrib, id, error);
+}
+
+
 static void gap_device_name_ext_prop_read_cb(struct gatt_db_attribute *attrib,
 					unsigned int id, uint16_t offset,
 					uint8_t opcode, struct bt_att *att,
@@ -410,7 +488,7 @@ static void populate_gap_service(struct server *server)
 
 	/* Add the GAP service */
 	bt_uuid16_create(&uuid, UUID_GAP);
-	service = gatt_db_add_service(server->db, &uuid, true, 6);
+	service = gatt_db_add_service(server->db, &uuid, true, 8);
 
 	/*
 	 * Device Name characteristic. Make the value dynamically read and
@@ -451,6 +529,19 @@ static void populate_gap_service(struct server *server)
 							NULL, confirm_write,
 							NULL);
 
+		/*
+	 * WiFi Name characteristic. Make the value dynamically read and
+	 * written via callbacks.
+	 */
+	bt_uuid16_create(&uuid, GATT_CHARAC_WIFI_NAME);
+	gatt_db_service_add_characteristic(service, &uuid,
+					BT_ATT_PERM_READ | BT_ATT_PERM_WRITE,
+					BT_GATT_CHRC_PROP_READ |
+					BT_GATT_CHRC_PROP_EXT_PROP,
+					gap_device_wifi_read_cb,
+					gap_device_wifi_write_cb,
+					server);
+
 	gatt_db_service_set_active(service, true);
 }
 
@@ -543,6 +634,8 @@ static struct server *server_create(int fd, uint16_t mtu, bool hr_visible)
 	struct server *server;
 	size_t name_len = strlen(test_device_name);
 
+	size_t wifi_len = strlen(test_wifi_name);
+
 	server = new0(struct server, 1);
 	if (!server) {
 		fprintf(stderr, "Failed to allocate memory for server\n");
@@ -566,6 +659,7 @@ static struct server *server_create(int fd, uint16_t mtu, bool hr_visible)
 		goto fail;
 	}
 
+//todo for wifi?
 	server->name_len = name_len + 1;
 	server->device_name = malloc(name_len + 1);
 	if (!server->device_name) {
@@ -576,6 +670,18 @@ static struct server *server_create(int fd, uint16_t mtu, bool hr_visible)
 	memcpy(server->device_name, test_device_name, name_len);
 	server->device_name[name_len] = '\0';
 
+
+	server->wifi_len = wifi_len + 1;
+	server->wifi_name = malloc(wifi_len + 1);
+	if (!server->wifi_name) {
+		fprintf(stderr, "Failed to allocate memory for wifi name\n");
+		goto fail;
+	}
+
+	memcpy(server->wifi_name, test_wifi_name, wifi_len);
+	server->wifi_name[wifi_len] = '\0';
+
+
 	server->fd = fd;
 	server->db = gatt_db_new();
 	if (!server->db) {
@@ -608,6 +714,7 @@ static struct server *server_create(int fd, uint16_t mtu, bool hr_visible)
 fail:
 	gatt_db_unref(server->db);
 	free(server->device_name);
+	free(server->wifi_name);
 	bt_att_unref(server->att);
 	free(server);
 
@@ -1225,6 +1332,17 @@ int main(int argc, char *argv[])
 		return EXIT_FAILURE;
 	}
 
+	int hciDeviceId = hci_get_route(NULL);
+	int hciSocket = hci_open_dev(hciDeviceId);
+
+	printf("%d %d\n",hciDeviceId, hciSocket);
+
+	// int res = hci_le_set_advertise_enable(0, 0, 1000);
+	// printf("advertise is disabled %d \n", res);
+		
+	int res = hci_le_set_advertise_enable(hciSocket, 1, 1000);
+	printf("advertise is enabled %d \n", res);
+
 	fd = l2cap_le_att_listen_and_accept(&src_addr, sec, src_type);
 	if (fd < 0) {
 		fprintf(stderr, "Failed to accept L2CAP ATT connection\n");
@@ -1233,6 +1351,8 @@ int main(int argc, char *argv[])
 
 	mainloop_init();
 
+
+
 	server = server_create(fd, mtu, hr_visible);
 	if (!server) {
 		close(fd);
@@ -1258,6 +1378,8 @@ int main(int argc, char *argv[])
 
 	print_prompt();
 
+
+
 	mainloop_run();
 
 	printf("\n\nShutting down...\n");
diff --git a/includes/lib/uuid.h b/includes/lib/uuid.h
index 7e13e0f..edee0fe 100644
--- a/includes/lib/uuid.h
+++ b/includes/lib/uuid.h
@@ -119,6 +119,8 @@ extern "C" {
 #define GATT_CHARAC_RECONNECTION_ADDRESS		0x2A03
 #define GATT_CHARAC_PERIPHERAL_PREF_CONN		0x2A04
 #define GATT_CHARAC_SERVICE_CHANGED			0x2A05
+#define GATT_CHARAC_WIFI_NAME				0x293F
+#define GATT_CHARAC_WIFI_PASSWORD			0x2A10
 #define GATT_CHARAC_BATTERY_LEVEL			0x2A19
 #define GATT_CHARAC_SYSTEM_ID				0x2A23
 #define GATT_CHARAC_MODEL_NUMBER_STRING			0x2A24
diff --git a/libshared/util.c b/libshared/util.c
index 43a81af..915f24c 100644
--- a/libshared/util.c
+++ b/libshared/util.c
@@ -327,12 +327,12 @@ static const struct {
 	{ 0x2a08, "Date Time"					},
 	{ 0x2a09, "Day of Week"					},
 	{ 0x2a0a, "Day Date Time"				},
-	/* 0x2a0b undefined */
+	{ 0x293f, "WiFi Name"					},
 	{ 0x2a0c, "Exact Time 256"				},
 	{ 0x2a0d, "DST Offset"					},
 	{ 0x2a0e, "Time Zone"					},
 	{ 0x2a0f, "Local Time Information"			},
-	/* 0x2a10 undefined */
+	{ 0x2a10, "WiFi Password"					},
 	{ 0x2a11, "Time with DST"				},
 	{ 0x2a12, "Time Accuracy"				},
 	{ 0x2a13, "Time Source"					},
